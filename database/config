{"global":{"config":{"STATIC_WEBUI_HEADER_NAME":"","STATIC_WEBSERVER_LISTEN_PORT":"3002","STATIC_USE_WEB_AUTHENTIFICATION":"false","STATIC_UPLOADPATH":"\\\\localhost\\c$\\temp\\","STATIC_ALLOWED_BROWSE_LOCATIONS_DISPLAY_NAMES":["Local examle","UNC example","D Drive on server","E Drive on server"],"STATIC_ALLOWED_BROWSE_LOCATIONS":["c:\\","\\\\localhost\\c$\\","D:\\","E:\\"],"STATIC_API_HOST":"localhost","STATIC_API_PORT":"65445","STATIC_API_NEW_PORT":"3003","STATIC_START_JOB_URL":"/api/json/v2/jobs/","STATIC_GET_WORKFLOWS_URL":"/api/json/v2/workflows","STATIC_GET_WORKFLOW_DETAILS_URL":"/api/json/v2/workflows","STATIC_GET_WORKFLOW_VARS_URL":"/api/json/v2/workflows/<wf_id>/user_variables","STATIC_GET_RUNNING_JOBS_URL":"/api/json/v2/jobs","STATIC_GET_FINISHED_JOBS_URL":"/api/json/v2/history","STATIC_GET_QUEUED_JOBS_URL":"/api/json/v2/tickets","STATIC_GET_JOB_LOG_URL":"/api/json/v2/joblog/","STATIC_USE_PROXY_URL":"true","STATIC_API_GET_JOB_LOG_URL":"/getjoblog","STATIC_API_GET_PENDING_JOBS_URL":"/tickets"}},"_id":"DiD4NHO1yB6jWiVv"}
{"scheduled_jobs":{"id":"0.23108390434090853","enabled":"1","job_name":"New Job","job_description":"","cron":"*/5 * * * *","last_start":"2021-01-26 08:15:00","date_created":"2021-01-25 21:57:46","workflow":"","script":"process.send(['testvalue']);//starts one job","last_pid":0,"last_end":"2021-01-26 08:15:00"},"_id":"Zi01IZo7rcAHbuxb"}
{"_id":"admin","local":{"usergroup":{"name":"admin","permissions":[{"key":"GROUPRIGHT_MENU_VIEW_JOB_STATUS","value":{"description":"Job Monitor"}},{"key":"GROUPRIGHT_MENU_VIEW_SUBMIT_JOBS","value":{"description":"Create new jobs on ffastrans"}},{"key":"GROUPRIGHT_MENU_VIEW_ADMIN_USERS","value":{"description":"Usermanagement"}},{"key":"GROUPRIGHT_MENU_VIEW_ADMIN","value":{"description":"Server admin menu item"}},{"key":"GROUPRIGHT_MENU_VIEW_SCHEDULER","value":{"description":"Scheduler menu item"}},{"key":"FILTER_WORKFLOW_GROUP","value":{"description":"Filters what workflows are presented to the user","filter":".*?"}},{"key":"FILTER_WORKFLOW_NAME","value":{"description":"Filters what workflows are presented to the user","filter":".*?"}},{"key":"FILTER_WORKFLOW_VARIABLES","value":{"description":"Filters user_variables presented to the user","filter":".*?"}},{"key":"FILTER_JOBSTATUS_BUTTONS","value":{"description":"Filters what Buttons are available on Jobstatus page","filter":"."}}]}}}
{"scheduled_jobs":{"id":"0.9318103930921628","enabled":"0","job_name":"JobControl","job_description":"","cron":"* * * * *","last_start":"2021-01-24 19:54:00","date_created":"2020-11-18 13:09:16","workflow":"","script":"var jobQueue = {}\n//USER CONFIGURATION: COPY THIS LINE FOR EACH WORKFLOW YOU LIKE TO CONTROL, EDIT ONLY WORKFLOWNAME AND max_jobs number\njobQueue[\"Convert Folder\"] = {\"max_jobs\":1,\"active\":[],\"paused\":[]}\n//jobQueue[\"anotherworkflowname\"] = {\"max_jobs\":8,\"active\":[],\"paused\":[]}\n\n\n//SCRIPT - DO NOT MODIFY IF YOU DON'T KNOW WHAT YOU DO\nvar getjobsurl = 'http://localhost:65445/api/json/v2/jobs';\nconst http = require('http');\n\n//get list of jobs\nhttp.get(getjobsurl, (resp) => {\n  let data = '';\n  resp.on('data', (chunk) => {\n    data += chunk;\n  });\n  resp.on('end', () => {\n    //process jobs\n     \n     processJobQue(data);\n     pauseResumeJobs()\n  });\n}).on(\"error\", (err) => {\n  console.log(\"Error: \" + err.message);\n});\n\n\nfunction processJobQue(jobData){\n  var jobData = JSON.parse(jobData);\n  for(i=0;i<jobData.jobs.length;i++){\n    console.log(jobData.jobs[i][\"workflow\"])\n    if (jobQueue[\n        jobData.jobs[i][\"workflow\"]]){\n    \tjobQueue[jobData.jobs[i][\"workflow\"]][\"active\"].push( jobData.jobs[i] );\n    }\n  }\n  console.log(jobQueue)\n}\n\nfunction pauseResumeJobs(){\n    \n  \t//foreach workflow, count paused and active jobs\n    for (key in jobQueue) {\n        //if there are paused jobs and less jobs than configured, do nothing\n        if (countPaused(jobQueue[key][\"active\"]) == 0 && jobQueue[key][\"active\"].length < jobQueue[key]['max_jobs']){\n            continue;\n        }\n        \n      \tvar activeCount = jobQueue[key][\"active\"].length; \n        var max = jobQueue[key]['max_jobs'];\n      \tfor (j=max;j<activeCount;j++){\n             //we assume that jobs are sorted by date already\n          \tif (!jobQueue[key][\"active\"][j]){\n            \tcontinue;//not ehough jobs\n            }\n             var jobid = jobQueue[key][\"active\"][j][\"job_id\"];\n          \t //console.log(jobQueue[key][\"active\"][j])\n             jobCommand(jobQueue[key][\"active\"][j],\"Pause\")\n          }//activate jobs \n      \n      \tfor (j=0;j<max;j++){\n          \t\n             //we assume that jobs are sorted by date already\n          \tif (!jobQueue[key][\"active\"][j]){\n            \tcontinue;//not ehough jobs\n            }\n             var jobid = jobQueue[key][\"active\"][j][\"job_id\"];\n             jobCommand(jobQueue[key][\"active\"][j],\"resume\")\n          }//activate jobs\n      \n  \n    };\n   \n}\n\n//send api command to ffastrans server\nfunction jobCommand(job,command){\n  \n  console.log(\"Sending \"+command+ \" to job \" +job[\"job_id\"])\n  var body = {};\n  body[\"action\"] = command;\n  body[\"split_id\"] = job[\"split_id\"];\n  const options = {\n    hostname: 'localhost',\n    port: 65445,\n    path: '/api/json/v2/jobs/' + job[\"job_id\"],\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Content-Length': JSON.stringify(body).length\n    }\n  }\n  const req = http.request(options, (res) => {\n    console.log(`statusCode: ${res.statusCode}`)\n    res.on('data', (d) => {\n      console.log(\"Success:\" + d)\n    })\n  })\n  req.on('error', (error) => {\n    console.error(error)\n  })\n  req.write(JSON.stringify(body))\n  req.end()\n\n}\n\nfunction countPaused(jobArray){\n\tvar running = 0;\n    for(i=0;i<jobArray.length;i++){\n    \tif (jobArray[i]['status'].indexOf('Paused')!=-1){\n        \t\n        }else{\n        \trunning ++;\n        }\n    }\n  return running;\n}","last_pid":0,"last_end":"2021-01-24 19:54:00"},"_id":"np8xXPJMY1zyiif6"}
{"local":{"username":"admin","password":"$2a$08$rjsDX6fo0YlTkMybYrruBOkStFeBxp2lu4TqAPSWqpzw2eWahLpwW","groups":["admin"]},"_id":"p0MT4nlVs40DLyJi"}
